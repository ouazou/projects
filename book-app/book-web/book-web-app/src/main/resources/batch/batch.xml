<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch.xsd
	">

    <!-- stored job-metadata in database -->
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseType" value="H2"/>
        <property name="maxVarCharLength" value="1000"/>
        <property name="isolationLevelForCreate" value="ISOLATION_READ_COMMITTED"/>

    </bean>


    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>


    <!-- create job-meta tables automatically -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-drop-h2.sql"/>
        <jdbc:script location="classpath:org/springframework/batch/core/schema-h2.sql"/>
    </jdbc:initialize-database>


    <bean id="book" class="com.paymentpin.projects.book.app.batch.BookMapper" scope="prototype"/>


    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

        <!-- Read a csv file -->
        <property name="resource" value="classpath:csv/books.csv"/>

        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!-- split it -->
                <property name="lineTokenizer">
                    <bean
                            class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="title,author,genre,pages,pubYear,rating"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="book"/>
                    </bean>
                </property>

            </bean>
        </property>

    </bean>

    <bean id="h2ItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
            	insert into books (title,author,genre,pages,pubYear,rating) values (:title,:author,:genre,:pages,:pubYear,:rating)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean
                    class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>

    <bean id="listner" class="com.paymentpin.projects.book.app.batch.SkipCheckingListener"/>

    <batch:job id="importJob">
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk  reader="cvsFileItemReader" writer="h2ItemWriter"
                             commit-interval="2">
                    <batch:listeners>
                        <batch:listener ref="listner"/>
                    </batch:listeners>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

</beans>

